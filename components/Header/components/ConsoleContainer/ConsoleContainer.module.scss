@use 'styles/variables.scss' as variables;
@use 'styles/mixins.scss' as mixins;
@use 'styles/buttons.scss' as *;

.consoleContainer {
  @include mixins.flex-center(column);
  flex-basis: 50%;
}

.console {
  background: variables.$purple;
  border-radius: variables.$border-radius;
  border: 2px solid variables.$black;
  box-shadow: 0.5rem 0.5rem variables.$black;
  display: flex;
  flex-direction: column;
  height: 700px;
  width: 400px;

  @media (max-width: variables.$md) {
    height: 600px;
    width: 350px;
  }
}

.topContainer {
  @include mixins.flex-center;
  background-color: variables.$black;
  border-radius: variables.$border-radius variables.$border-radius 0 0;
  height: 60%;
  padding: 1rem;
}

.bottomContainer {
  @include mixins.flex-center;
  flex-direction: column;
  height: 40%;
  justify-content: space-between;
  padding: 1.5rem 2.5rem;

  @media (max-width: variables.$md) {
    padding: 1rem;
  }
}

.speakers {
  align-self: flex-end;
}

.fakeButtons {
  align-self: flex-start;
  display: flex;
  justify-content: space-between;
  width: 100%;

  div {
    align-items: center;
    display: flex;
    gap: 0.5rem;
  }
}

.fakeRoundedButton {
  background-color: variables.$black;
  border-radius: 50%;
  height: variables.$border-radius;
  width: variables.$border-radius;
}

.fakeLongButton {
  background-color: variables.$black;
  border-radius: variables.$border-radius;
  height: variables.$border-radius;
  width: 45px;
}

.actionButtons {
  align-items: center;
  display: flex;
  justify-content: space-between;
  padding: 1.5rem;
  width: 100%;
}

.saveButton {
  @extend .primaryButton;
  border-radius: 50%;
  height: 80px;
}

.consoleActionButton {
  @extend .primaryButton;
  @include mixins.flex-center;
  background-color: variables.$orange;
  border-radius: 50%;
  height: 30px;
  width: 30px;
}

.consoleButtonsContainer {
  display: grid;
  grid-gap: 0;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);

  // & > div:nth-of-type(1) {
  //   grid-column: 2;
  //   grid-row: 1;
  //   position: relative;
  // }

  // @for $i from 2 through 4 {
  //   div:nth-of-type(#{$i}) {
  //     grid-column: 4 - $i;
  //     @if ($i % 2 == 0) {
  //       grid-row: 3;
  //       position: relative;
  //     } @else {
  //       grid-row: 2;
  //       position: relative;
  //     }
  //   }
  // }
}

.pixelArtTable {
  background-color: variables.$white;
  border-collapse: collapse;
  border-radius: variables.$border-radius;
  cursor: pointer;
  height: 100%;
  margin: 0 auto;
  width: 100%;

  & > tbody > tr {
    & > td {
      border: 1px solid variables.$black;
      min-width: 0.5vmin;
      transition: background 0.15s;
      width: 0.5vmin;

      &:hover {
        background: rgba(40, 40, 40, 0.3);
      }
    }
  }
}

.colorPicker {
  cursor: pointer;
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  width: 100%;
  z-index: 1;
}
